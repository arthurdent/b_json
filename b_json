#!/bin/bash

# pop [n] : remove n-chars from the stack
# Return false when length is zero
b_pop() {
	b_len="${1:-1}"
	b_json="${b_json:$b_len}"
	b_ch="${b_json:0:1}"
}

# match [n] [p:-0] : match string [n] starting at [q] in the stack
b_match() {
	b_len="${#1}"
	b_start="${2:-0}"
	[[ "${b_json:$b_start:$b_len}" == "$1" ]]
}

# Debug: start indented block
b_startblock() { 
	b_echo "<${@}>"  
	b_pad+="\t"
}

# Debug: end indented block
b_endblock() { 
	b_pad=${b_pad:2}
	b_echo "</$@>" 
}

# Print indented output
b_echo() {
	echo -e "${b_pad}$@"
}

# Error: Print to STDERR and exit
# Args: type, expected_value, [found_value]
b_error() {
	echo "ERROR in $1 -- Expected: $2 -- Found: ${3:-$b_ch}" >&2
	exit 1
}

# Do the thing
b_json() {

	# Remove whitespace in non-strings
	while IFS= read -rn1 b_char; do
		case "$b_char" in
			\\) b_escape="on" ;;&
			\") [[ "$b_is_string" ]] && [[ ! "$b_escape" ]] && b_is_string="" || b_is_string="on"; b_escape="" ;;&
			*) [[ "$b_is_string" || "$b_char" =~ [^[:space:]] ]] && b_json+="$b_char" ; b_escape="" ;;
		esac
	done <<< "$@"

	b_json=" $b_json" # prime b_pop hack

	# Iterate over every character
	while b_pop ; do
		case "$b_ch" in
			'{') b_parse_object ;;
			'[') b_parse_array ;;
			'') return ;;
			*) b_error "JSON" "'{' or '['" "'$b_char'" ;;
		esac
	done

}


# Parse an object - {} - string : value [, string : value]
b_parse_object() {

	# Make sure it's an object.
	b_startblock "object"
	b_match '{' || b_error "OBJECT" "'{'"
	b_match '}' 1 1 && b_endblock "object" && return # Dumb corner case

	while b_pop ; do

		# string : value [, string: value]
		b_parse_string
		b_match ':' || b_error "OBJECT" "':'"
		b_pop
		b_parse_value

		# Check for remaining members
		b_match ',' && continue
		b_match '}' && break
		b_error "OBJECT" "',' or '}'"

	done

	# Make sure this object ends.
	b_match '}' || b_error "OBJECT" "',' or '}'"
	b_endblock "object"
	b_pop

}

# Parse an array - [] - value [, value]
b_parse_array() {
	
	# Make sure this is an array.
	b_startblock "array"
	b_match '[' || b_error "ARRAY" "'['"
	b_match ']' 1 1 && b_endblock "array" && return # Dumb corner case

	while b_pop ; do

		b_parse_value
		b_match ',' && continue
		b_match ']' && break
		b_error "ARRAY" "',' or ']'"

	done
	
	# Make sure this array ends
	b_match ']' || error "ARRAY" "']'"
	b_endblock "array"
	b_pop
 
}

# Parse a value - true, false, null, string, object, array, number
b_parse_value() {

	b_startblock "value"

	case "$b_ch" in
		t|f|n)     b_parse_enum   ;;
		\")        b_parse_string ;;
		'{')       b_parse_object ;;
		'[')       b_parse_array  ;;
		[0-9]) b_parse_number ;;
		*)         b_error "VALUE" "string, number, object, array, true, false, or null" "${b_json:0:6}) ..." ;;
	esac

	b_endblock "value"

	return 0

}

# Parse a string - "[:char:]*"
b_parse_string() {

	b_match '"' || b_error "STRING" "'\"'"
	b_startblock "string"

	b_string=""
	while b_pop; do
		case "$b_ch" in
			\") [[ ! "$b_escape" ]] && break || b_escape="" ;;
			\\) b_escape="on"                               ;;&
			*)  b_string+="$b_ch" ;  b_escape=""          ;;
		esac
	done
	
	b_echo "$b_string"

	b_match '"' || b_error "STRING" "'\"'"
	b_endblock "string"
	b_pop # Remove "

	return 0

}

# {int frac, int exp, int frac exp}
b_parse_number() {
	
	# TODO, handle exponent without following value

	b_startblock "number"

	# TODO: b_rmatch?
	[[ "$b_ch" =~ [0-9] ]] && b_num="$b_ch" || b_error "NUMBER" "'[0-9]' or '.' or 'e'"

	b_dec=""
	b_exp=""
	while b_pop; do
		case "$b_ch" in
			[0-9])
				b_num+="$b_ch"
				;;
			'.')
				[[ "$b_dec" ]] && b_error "NUMBER" "'[0-9]' or 'e'"
				b_dec="on"
				b_num+="$b_ch"
				;;
			'e')
				[[ "$b_exp" ]] && b_error "NUMBER" "'[0-9]' or '.'"
				b_dec="on"
				b_exp="on"
				;;
			*)
				break
				;;
		esac
	done

	b_echo "$b_num"

	b_endblock "number"

}

# true, false 
b_parse_enum() {

	if b_match 'true' ; then
		b_echo "true"
		b_pop 4
		return 0
	fi

	if b_match 'false' ; then
		b_echo "false"
		b_pop 5
		return 0
	fi
	
	if b_match 'null' ; then
		b_echo "NULL"
		b_pop 4
		return
	fi
	
	b_error "VALUE" "string, number, object, array, true, false, or null" "${b_json:0:5} ..."

}
